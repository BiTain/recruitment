package com.graduate.recruitment.controller.auth;

import com.graduate.recruitment.dto.SinhVienDangKyDto;
import com.graduate.recruitment.entity.TaiKhoan;
import com.graduate.recruitment.entity.enums.TrangThaiTaiKhoan;
import com.graduate.recruitment.repository.TaiKhoanRepository;
import com.graduate.recruitment.service.AuthService;
import com.graduate.recruitment.service.EmailService;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;
import lombok.AllArgsConstructor;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.context.HttpSessionSecurityContextRepository;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;


@Controller
@AllArgsConstructor
public class SinhVienAuthController {

    private AuthService authService;
    private TaiKhoanRepository taiKhoanRepository;
    private EmailService emailService;
    private PasswordEncoder passwordEncoder;

    @GetMapping("/sinh-vien/dang-nhap")
    public String getTrangDangNhap() {
        return "/student/auth/login";
    }

    @PostMapping("/sinh-vien/dang-nhap")
    public String xuLyDangNhap(@RequestParam String email,
                               @RequestParam String password,
                               HttpServletRequest request,
                               Model model) {
        TaiKhoan taiKhoan = authService.xuLyDangNhap(email, password);

        if(taiKhoan == null) {
            model.addAttribute("errorMsg", "Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng ch√≠nh x√°c ");
            return "/student/auth/login";
        }
        else if (taiKhoan.getTrangThai() == TrangThaiTaiKhoan.KHONG_HOAT_DONG || taiKhoan.getTrangThai() == TrangThaiTaiKhoan.BI_KHOA) {
            model.addAttribute("errorMsg", "T√†i kho·∫£n ƒë√£ b·ªã kh√≥a");
            return "/student/auth/login";
        }
        else {
            // üî• Ph·∫ßn quan tr·ªçng: l∆∞u v√†o session
            HttpSession session = request.getSession(true); // t·∫°o session n·∫øu ch∆∞a c√≥
            session.setAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY,
                    SecurityContextHolder.getContext());
            return "redirect:/";
        }
    }

    @GetMapping("/sinh-vien/dang-ky")
    public String getTrangDangKy(Model model) {
        model.addAttribute("sinhVien", new SinhVienDangKyDto());
        return "/student/auth/register";
    }

    @GetMapping("/kich-hoat")
    public String verify(@RequestParam("maTaiKhoan") String maTaiKhoan, Model model) {
        boolean valid = authService.kichHoatTaiKhoan(maTaiKhoan);
        if (valid) {
            model.addAttribute("successMsg", "T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n th√†nh c√¥ng vui l√≤ng ƒëƒÉng nh·∫≠p.");
        } else {
            model.addAttribute("errorMsg", "T√†i kho·∫£n kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.");
        }
        return "/student/auth/login";
    }

    @PostMapping("/sinh-vien/dang-ky")
    public String register(@ModelAttribute("sinhVien") SinhVienDangKyDto dto, Model model) {
        try {
            authService.sinhVienDangKy(dto);
            model.addAttribute("message", "ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email.");
            return "/student/auth/verify-email";
        } catch (Exception e) {
            model.addAttribute("error", e.getMessage());
            return "/student/auth/register";
        }
    }

    @GetMapping("/sinh-vien/quen-mat-khau")
    public String getTrangQuenMatKhau(Model model) {
        return "/student/auth/forgot-password";
    }

    @PostMapping("/sinh-vien/quen-mat-khau")
    public String xuLyQuenMatKhau(@RequestParam("email") String email, Model model) {
        TaiKhoan tk = taiKhoanRepository.findByEmail(email);

        if (tk == null) {
            model.addAttribute("message", "Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.");
        } else {
            // G·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ho·∫∑c token reset
            // V√≠ d·ª•: t·∫°o token, l∆∞u DB, g·ª≠i link reset
            emailService.sendResetPasswordEmail(tk);
            model.addAttribute("message", "H∆∞·ªõng d·∫´n ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i qua email.");
        }

        return "/student/auth/forgot-password"; // t√™n view HTML
    }

    @GetMapping("/sinh-vien/dat-lai-mat-khau")
    public String showResetPasswordForm(@RequestParam("maTaiKhoan") String maTaiKhoan, Model model) {
        model.addAttribute("maTaiKhoan", maTaiKhoan);
        return "/student/auth/reset-password-form"; // t√™n file HTML form ƒë·ªïi m·∫≠t kh·∫©u
    }

    @PostMapping("/sinh-vien/dat-lai-mat-khau")
    public String datLaiMatKhau(
            @RequestParam("maTaiKhoan") String maTaiKhoan,
            @RequestParam("matKhauMoi") String matKhauMoi,
            @RequestParam("xacNhanMatKhauMoi") String xacNhanMatKhauMoi,
            RedirectAttributes redirectAttributes) {
        if (!matKhauMoi.equals(xacNhanMatKhauMoi)) {
            redirectAttributes.addFlashAttribute("errorMsg", "M·∫≠t kh·∫©u nh·∫≠p l·∫°i kh√¥ng ch√≠nh x√°c");
            redirectAttributes.addAttribute("maTaiKhoan", maTaiKhoan);
            return "redirect:/sinh-vien/dat-lai-mat-khau";
        } else {
            TaiKhoan tk = taiKhoanRepository.findById(maTaiKhoan).get();
            tk.setMatKhau(passwordEncoder.encode(matKhauMoi));
            taiKhoanRepository.save(tk);
            redirectAttributes.addFlashAttribute("successMsg", "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng");
            return "redirect:/sinh-vien/dang-nhap";
        }
    }

}