package com.graduate.recruitment.controller.auth;

import com.graduate.recruitment.config.CustomUserPrincipal;
import com.graduate.recruitment.dto.DoanhNghiepDangKyDto;
import com.graduate.recruitment.dto.NhaTruongDangKyDto;
import com.graduate.recruitment.entity.DoanhNghiep;
import com.graduate.recruitment.entity.SinhVien;
import com.graduate.recruitment.entity.TaiKhoan;
import com.graduate.recruitment.repository.DoanhNghiepRepository;
import com.graduate.recruitment.repository.TaiKhoanRepository;
import com.graduate.recruitment.service.AuthService;
import com.graduate.recruitment.service.EmailService;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import lombok.AllArgsConstructor;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.context.HttpSessionSecurityContextRepository;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.ArrayList;
import java.util.Collections;

@Controller
@AllArgsConstructor
public class DoanhNghiepAuthController {
    private final DoanhNghiepRepository doanhNghiepRepository;
    private TaiKhoanRepository taiKhoanRepository;
    private PasswordEncoder passwordEncoder;
    private AuthService authService;
    private EmailService emailService;

    @GetMapping("/doanh-nghiep/dang-nhap")
    public String getTrangDangNhap() {
        return "/business/auth/login";
    }

    @GetMapping("doanh-nghiep/dang-ky")
    public String getTrangDangKy(Model model) {
        model.addAttribute("doanhNghiep",new DoanhNghiepDangKyDto());
        return "/business/auth/register";
    }

    @PostMapping("/doanh-nghiep/dang-ky")
    public String xuLyDangKy(@ModelAttribute("doanhNghiep") DoanhNghiepDangKyDto doanhNghiepDangKyDto,
                             RedirectAttributes redirectAttributes){
        try{
            authService.doanhNghiepDangKy(doanhNghiepDangKyDto);
            redirectAttributes.addFlashAttribute("successMsg","T√†i kho·∫£n c·ªßa b·∫°n ƒëang ch·ªù ph√™ duy·ªát, h√£y theo d√µi email!");
            return "redirect:/doanh-nghiep/dang-nhap";
        }catch (Exception e){
            redirectAttributes.addFlashAttribute("errorMsg",e.getMessage());
            return "redirect:/doanh-nghiep/dang-ky";
        }
    }

    @PostMapping("/doanh-nghiep/quen-mat-khau")
    public String xuLyQuenMatKhau(@RequestParam("email") String email, Model model) {
        TaiKhoan tk = taiKhoanRepository.findByEmail(email);

        if (tk == null) {
            model.addAttribute("message", "Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.");
        } else {
            // G·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ho·∫∑c token reset
            // V√≠ d·ª•: t·∫°o token, l∆∞u DB, g·ª≠i link reset
            emailService.sendResetPasswordEmailWithFrom(tk, "admin@gmail.com", "doanh-nghiep");
            model.addAttribute("message", "H∆∞·ªõng d·∫´n ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i qua email.");
        }

        return "/student/auth/forgot-password"; // t√™n view HTML
    }

    @GetMapping("/doanh-nghiep/quen-mat-khau")
    public String getTrangQuenMatKhau(Model model) {
        return "/business/auth/forgot-password";
    }

    @GetMapping("/doanh-nghiep/dat-lai-mat-khau")
    public String showResetPasswordForm(@RequestParam("maTaiKhoan") String maTaiKhoan, Model model) {
        model.addAttribute("maTaiKhoan", maTaiKhoan);
        return "/business/auth/reset-password-form-doanh-nghiep"; // t√™n file HTML form ƒë·ªïi m·∫≠t kh·∫©u
    }

    @PostMapping("/doanh-nghiep/dat-lai-mat-khau")
    public String datLaiMatKhau(
            @RequestParam("maTaiKhoan") String maTaiKhoan,
            @RequestParam("matKhauMoi") String matKhauMoi,
            @RequestParam("xacNhanMatKhauMoi") String xacNhanMatKhauMoi,
            RedirectAttributes redirectAttributes) {
        if (!matKhauMoi.equals(xacNhanMatKhauMoi)) {
            redirectAttributes.addFlashAttribute("errorMsg", "M·∫≠t kh·∫©u nh·∫≠p l·∫°i kh√¥ng ch√≠nh x√°c");
            redirectAttributes.addAttribute("maTaiKhoan", maTaiKhoan);
            return "redirect:/doanh-nghiep/dat-lai-mat-khau";
        } else {
            TaiKhoan tk = taiKhoanRepository.findById(maTaiKhoan).get();
            tk.setMatKhau(passwordEncoder.encode(matKhauMoi));
            taiKhoanRepository.save(tk);
            redirectAttributes.addFlashAttribute("successMsg", "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng");
            return "redirect:/doanh-nghiep/dang-nhap";
        }
    }

    @PostMapping("/doanh-nghiep/dang-nhap")
    public String xuLyDangNhap(@RequestParam String email,
                               @RequestParam String password,
                               HttpServletRequest request,
                               Model model) {
        TaiKhoan taiKhoan = taiKhoanRepository.findByEmail(email);

        if (taiKhoan == null) {
            model.addAttribute("errorMsg", "Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng ch√≠nh x√°c");
            return "/business/auth/login";
        }

        if (!passwordEncoder.matches(password, taiKhoan.getMatKhau())) {
            model.addAttribute("errorMsg", "Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng ch√≠nh x√°c");
            return "/business/auth/login";
        }

        DoanhNghiep doanhNghiep = doanhNghiepRepository.findByTaiKhoan(taiKhoan);

        // L∆∞u th√¥ng tin ƒëƒÉng nh·∫≠p v√†o SecurityContext
        CustomUserPrincipal principal = new CustomUserPrincipal(taiKhoan, doanhNghiep, Collections.emptyList());
        UsernamePasswordAuthenticationToken authentication =
                new UsernamePasswordAuthenticationToken(principal, null, new ArrayList<>());
        SecurityContextHolder.getContext().setAuthentication(authentication);

        // üî• Ph·∫ßn quan tr·ªçng: l∆∞u v√†o session
        HttpSession session = request.getSession(true); // t·∫°o session n·∫øu ch∆∞a c√≥
        session.setAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY,
                SecurityContextHolder.getContext());

        return "redirect:/doanh-nghiep";
    }

    @GetMapping("/doanh-nghiep/dang-xuat")
    public String dangXuat(HttpServletRequest request, HttpServletResponse response) {
        // ‚úÖ X√≥a th√¥ng tin x√°c th·ª±c
        SecurityContextHolder.clearContext();

        // ‚úÖ X√≥a session
        HttpSession session = request.getSession(false); // false ƒë·ªÉ kh√¥ng t·∫°o session m·ªõi
        if (session != null) {
            session.invalidate(); // hu·ª∑ session hi·ªán t·∫°i
        }

        return "redirect:/"; // ho·∫∑c trang b·∫°n mu·ªën ƒë∆∞a ng∆∞·ªùi d√πng v·ªÅ sau khi ƒëƒÉng xu·∫•t
    }
}
